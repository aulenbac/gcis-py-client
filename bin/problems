#!/usr/bin/env python
__author__ = 'abuddenberg'

import pickle
from gcis_clients import GcisClient, WebformClient, gcis_dev_auth, gcis_stage_auth, webform_token
from gcis_clients.sync_utils import move_images_to_gcis

webform_client = WebformClient('http://resources.assessment.globalchange.gov', webform_token)

gcis = GcisClient('http://data.gcis-dev-front.joss.ucar.edu', *gcis_dev_auth)
# gcis = GcisClient('http://data-stage.globalchange.gov', *gcis_stage_auth)

whitelisted_dupes = [
    'e13cdf2e-0699-4c52-a642-56c8fc3317c4', #33.11 #34.11
    '03937439-cc5a-45c7-a0fd-78b863c49979', #33.11 #34.11

    '0bcb7984-50c0-4f94-9946-c3fa635125a4', #2.1 #34.2

    'eb9bd7dc-3e3a-4001-9a64-f2a0763b3f64', #2.31 #34.21
    '8c679de0-4a6c-4fc9-bbd1-59251ffe3d7f', #2.31 #34.21

    'a1bd40f2-424e-4af8-8d3d-f44ba7ba36b6', #33.17 #34.13

    '834f7624-40de-4a09-9ced-faaca30d4d6d', #2.27 #18.7
]

def main():
    hitlist_file = 'hitlist.pk1'

    # create_problem_list('nca3', hitlist_file)
    # print_problem_list(hitlist_file)
    solve_problems(hitlist_file, 'nca3')
    # print_ready_list(hitlist_file)


def solve_problems(path, report_id):
    problems = load_problem_list(path)

    for webform in problems:
        webform_id, fig_num, gcis_id = webform

        #Without a valid GCIS figure_id, nothing else can happen
        if 'figure_id_not_found' in problems[webform]:
            print 'Unable to resolve figure identifier: {fig}'.format(fig=problems[webform]['figure_id_not_found'])
            continue

        img_id_missing = set(problems[webform]['image_id_not_found']) if 'image_id_not_found' in problems[webform] else set()
        img_file_missing = set(problems[webform]['missing_image_files']) if 'missing_image_files' in problems[webform] else set()
        creates = img_id_missing - img_file_missing

        img_assoc_broken = set(problems[webform]['broken_image_assoc']) if 'broken_image_assoc' in problems[webform] else set()
        assocs = img_assoc_broken - creates - img_file_missing

        if len(creates) > 0:
            move_images_to_gcis(webform_client, gcis, webform_id, gcis_id, report_id, subset_images=creates)

        for image_id in assocs:
            print 'Associating image: {i} with figure: {f}'.format(i=image_id, f=gcis_id)
            gcis.associate_image_with_figure(image_id, report_id, gcis_id)


def create_problem_list(report_id, path):
    with open(path, 'wb') as problem_file:
        pickle.dump(sort_webform_list(report_id), problem_file)


def load_problem_list(path):
    all_forms, ready, problems = pickle.load(open(path, 'r'))
    return problems


def load_ready_list(path):
    all_forms, ready, problems = pickle.load(open(path, 'r'))
    return ready


def print_problem_list(path, filter=None):
    problems = load_problem_list(path)

    for webform in problems:
        if filter:
            problems[webform] = {k: problems[webform][k] for k in problems[webform] if k == filter}
        print webform
        for problem_type in problems[webform]:
            print '\t', problem_type, problems[webform][problem_type]
    print len(problems)


def print_ready_list(path):
    for x in sorted(load_ready_list(path), key=lambda t: float(t[1])):
        webform_id, figure_num, gcis_id = x
        print '{tuple},  # {f}'.format(tuple=(str(webform_id), gcis_id), f=figure_num)
    print len(load_ready_list(path))

def sort_webform_list(report_id):
    all_forms = []
    ready = []
    problems = {}
    
    global_image_ids = {}

    for item in webform_client.get_list():
        webform_url = item['url']
        f = webform_client.get_webform(webform_url)
        key = (webform_url, f.figure_num, f.identifier)

        all_forms.append(key)

        #Check the ready for publication flag
        if 'ready_for_publication' in f.original and f.original['ready_for_publication'] == 'yes':
            #Check if the figure exists in GCIS
            if not gcis.figure_exists(report_id, f.identifier):
                problems.setdefault(key, {}).setdefault('figure_id_not_found', []).append(
                    (f.identifier, f.figure_num, f.title))

            #Check if organizations have been proper identified
            for cont in f.contributors:
                if cont.organization.identifier is None:
                    problems.setdefault(key, {}).setdefault('org_id_not_found', []).append(cont)

            for image in f.images:
                #Squirrel the image identifier away from later
                global_image_ids.setdefault(image.identifier, []).append(key)

                #Check if each image exists in GCIS
                if not gcis.image_exists(image.identifier):
                    problems.setdefault(key, {}).setdefault('image_id_not_found', []).append(
                        image.identifier)

                #Check if each image's dataset exists in GCIS
                for dataset in image.datasets:
                    if not gcis.dataset_exists(dataset.identifier):
                        problems.setdefault(key, {}).setdefault('dataset_id_not_found',
                            []).append(dataset.identifier)

                #Check if the filename fields are filled out and correct for what's been uploaded
                if image.remote_path in (None, '') or not webform_client.remote_image_exists(image.remote_path):
                    problems.setdefault(key, {}).setdefault('missing_image_files', []).append(
                        image.identifier)

                #Check if organizations have been proper identified
                for cont in image.contributors:
                    if cont.organization.identifier is None:
                        problems.setdefault(key, {}).setdefault('org_id_not_found', []).append(cont)

            #Check for broken image associations
            has_all_images, image_deltas = gcis.has_all_associated_images(report_id, f.identifier,
                                                                               [i.identifier for i in f.images])
            if not has_all_images and len(image_deltas) > 0:
                problems.setdefault(key, {}).setdefault('broken_image_assoc', []).extend(
                    image_deltas)

            if key not in problems:
                ready.append(key)

    #Last but not least, check if image UUIDs are actually unique
    for image_id, keys in global_image_ids.iteritems():
        if len(keys) > 1:

            for key in keys:
                if image_id in whitelisted_dupes:
                    continue
#                ready.pop(key, None)
                problems.setdefault(key, {}).setdefault('duplicate_image_id', []).append((image_id, key))

    return all_forms, ready, problems


if __name__ == '__main__':
    main()
